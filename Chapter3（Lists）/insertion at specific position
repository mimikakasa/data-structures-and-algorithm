#include<iostream>
using namespace std;

class Node
{
public:
	int data;
	Node* next;

	//Constructor to initialize node
	Node(int data)
	{
		this->data = data;
		this->next = nullptr;//Default to nullptr
	}
};

class LinkedList
{
private:
	Node* head;

public:
	//Constructor to initialize the linked list
	LinkedList()
	{
		head = nullptr;
	}

	//Method to insert at the beginning
	void insertAtBegin(int data)
	{
		Node* newNode = new Node(data);
		newNode->next = head;
		head = newNode;
	}

	//Method to insert at the end
	void insertAtEnd(int data)
	{
		Node* newNode = new Node(data);
		if (head == nullptr)
		{
			head = newNode;
			return;
		}
		Node* temp = head;
		while (temp->next != nullptr)
		{
			temp = temp->next;
		}
		temp->next = newNode;//newNode = temp->next; 会使得 newNode 指向 temp 节点的下一个节点，
		//而不是把 temp->next 设置为指向 newNode
	}

	//method to insert after a specific node
	void insertAfterNode(Node* prevNode, int data)
	{
		if (prevNode==nullptr)
		{
			cout << "previous node cannot be nullptr" << endl;
			return;
		}

		Node* newNode = new Node(data);
		newNode->next = prevNode->next;
		prevNode->next = newNode;
	}

	//Method to get the head of the list
	Node* getHead()
	{
		return head;
	}

	//Method to print the list
	void printList()
	{
		Node* temp = head;
		cout << "[";
		while (temp != nullptr)
		{
			cout << " " << temp->data << " ";
			temp = temp->next;
		}
		cout << "]";
	}

	//Destructor to free the allocated memory
	~LinkedList()
	{
		Node* current = head;
		while (current != nullptr)
		{
			Node* nextNode = current->next;
			delete current;
			current = nextNode;
		}
	}
};

int main()
{
	LinkedList list;

	list.insertAtBegin(5);
	list.insertAtBegin(4);
	list.insertAtBegin(3);

	list.insertAfterNode(list.getHead()->next, 6);
	list.insertAfterNode(list.getHead()->next->next, 7);


	cout << "Linked List:";
	list.printList();

	system("pause");
	return 0;
}
